# Deploy them independently 

# SERVER_HOST：Your server's IP address or domain name。
# SERVER_USER：SSH login username。
# SERVER_PASSWORD：SSH login password. (Recommend using SSH key pair authentication instead of password)
# DOCKER_PASSWORD
# DOCKER_USERNAME

name: Deploy to Server # Define the name of the workflow

on: # Define the events that trigger the workflow
  push: # When the code is pushed
    branches: # Specify the branch that triggers the workflow
      - main # Only push notifications from the main branch will trigger this workflow
      - fingerprintAuth  # Fingerprint login, no user login required
      - wallet-connection  # Wallet management 
      - wallet-ether  # Update wallet for ether processing

jobs: # Define the tasks to be performed
  build: # The identifier for the job, here is the construction job

    runs-on: ubuntu-latest # Specify the running environment as the latest version of Ubuntu virtual environment

    steps: # Define the steps for execution
      - name: Checkout code # step name
        uses: actions/checkout@v2 # Use the official actions provided by GitHub Action/ checkout@v2 Action, used to check out warehouse code

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        # run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 


      - name: Build and Push Docker image # step name
        uses: docker/build-push-action@v5 # Using Docker/ build-push-action@v2 Action, used to build and push Docker images
        with: # Parameters passed to the action
          # username: ${{ secrets.DOCKER_USERNAME }}
          # password: ${{ secrets.DOCKER_PASSWORD }}

          push: true # Push images to Docker Hub
          tags: dianbobo202311/open-webui:latest # Set the label for the image


      - name: Deploy to Server # step name
        timeout-minutes: 40 # Set timeout to 40 minutes
        uses: appleboy/ssh-action@master # Using Appleboy/ ssh-action@master Action, used to connect to the server via SSH
        with: # Parameters passed to the action
          host: ${{ secrets.SERVER_HOST }} # The IP address or domain name of the server
          username: ${{ secrets.SERVER_USER }} # SSH login username
          # password: ${{ secrets.SERVER_PASSWORD }} # SSH login password
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH private key

          script: | # Script executed through SSH
      
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin # Log in to Docker
            docker pull dianbobo202311/open-webui:latest # Pull the latest Docker image
      
            # Check and stop running containers
            if [ "$(docker ps -q -f name=open-webui)" ]; then
              docker stop open-webui # Stop running container
              docker rm open-webui  # Delete Container
              
              # Waiting for the container to be completely deleted
              while [ "$(docker ps -a -f name=open-webui -q)" ]; do
                echo "Waiting for open-webui container to be removed..."
                sleep 2
              done

            fi
      
            # Run a new Docker container
            docker run -p 3000:8080 -d --rm --name open-webui dianbobo202311/open-webui:latest # Run Docker container
            docker images -q | tail -n +3 | xargs docker rmi # Delete all Docker images except for the first two



